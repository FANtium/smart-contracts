// SPDX-License-Identifier: MIT
pragma solidity 0.8.28;

import { IFANtiumMarketplace, Offer } from "../src/interfaces/IFANtiumMarketplace.sol";
import { FANtiumMarketplaceFactory } from "./setup/FANtiumMarketplace.t.sol";
import { Ownable } from "solady/auth/Ownable.sol";
import { BaseTest } from "test/BaseTest.sol";

contract FANtiumMarketplaceV1Test is BaseTest, FANtiumMarketplaceFactory {
    // pause
    // ========================================================================
    function test_pause_ok_admin() public {
        vm.prank(fantiumMarketplace_admin);
        fantiumMarketplace.pause();
        assertTrue(fantiumMarketplace.paused());
    }

    function test_pause_revert_unauthorized() public {
        address unauthorized = makeAddr("unauthorized");

        vm.expectRevert(abi.encodeWithSelector(Ownable.Unauthorized.selector));
        vm.prank(unauthorized);
        fantiumMarketplace.pause();
    }

    // unpause
    // ========================================================================
    function test_unpause_ok_admin() public {
        // First pause the contract
        vm.prank(fantiumMarketplace_admin);
        fantiumMarketplace.pause();
        assertTrue(fantiumMarketplace.paused());

        // Then unpause it
        vm.prank(fantiumMarketplace_admin);
        fantiumMarketplace.unpause();
        assertFalse(fantiumMarketplace.paused());
    }

    function test_unpause_revert_unauthorized() public {
        // First pause the contract
        vm.prank(fantiumMarketplace_admin);
        fantiumMarketplace.pause();
        assertTrue(fantiumMarketplace.paused());

        address unauthorized = makeAddr("unauthorized");

        vm.expectRevert(abi.encodeWithSelector(Ownable.Unauthorized.selector));
        vm.prank(unauthorized);
        fantiumMarketplace.unpause();
    }

    // setTreasuryAddress
    // ========================================================================
    function test_setTreasuryAddress_ok() public {
        address newTreasury = makeAddr("newTreasury");
        vm.prank(fantiumMarketplace_admin);
        vm.expectEmit(true, true, true, true);
        emit TreasuryAddressUpdate(newTreasury);
        fantiumMarketplace.setTreasuryAddress(newTreasury);
        assertEq(fantiumMarketplace.treasury(), newTreasury);
    }

    function test_setTreasuryAddress_revert_invalidAddress() public {
        vm.prank(fantiumMarketplace_admin);
        vm.expectRevert(abi.encodeWithSelector(IFANtiumMarketplace.InvalidTreasuryAddress.selector, address(0)));
        fantiumMarketplace.setTreasuryAddress(address(0));
    }

    function test_setTreasuryAddress_revert_sameTreasuryAddress() public {
        address newTreasury = makeAddr("newTreasury");
        vm.prank(fantiumMarketplace_admin);
        fantiumMarketplace.setTreasuryAddress(newTreasury);
        assertEq(fantiumMarketplace.treasury(), newTreasury);
        vm.prank(fantiumMarketplace_admin);
        vm.expectRevert(abi.encodeWithSelector(IFANtiumMarketplace.TreasuryAddressAlreadySet.selector, newTreasury));
        fantiumMarketplace.setTreasuryAddress(newTreasury);
    }

    function test_setTreasuryAddress_revert_nonOwner() public {
        address newTreasury = makeAddr("newTreasury");
        address nonAdmin = makeAddr("random");
        vm.prank(nonAdmin);
        vm.expectRevert(abi.encodeWithSelector(Ownable.Unauthorized.selector));
        fantiumMarketplace.setTreasuryAddress(newTreasury);
    }

    // executeOffer
    // ========================================================================
    function test_executeOffer_ok() public {
        Offer memory offer = Offer({
            seller: 0xc0ffee254729296a45a3885639AC7E10F9d54979,
            tokenAddress: 0x999999cf1046e68e36E1aA2E0E07105eDDD1f08E,
            tokenId: 1,
            amount: 1,
            fee: 1,
            expiresAt: 1
        });

        // this signature is generated by Mat's script
        bytes memory signature =
            hex"2b08aeaa2c6e1c8aa029ce51c9d765cfb4a95da7f896522ba5dea4c69b33f3ed218fe53daa591428f0994f3e88c02626e40b402d5ca17cd718a0c747fee7a61a1c";

        // todo: _verifySignature shouldn't revert
        // revert [Revert] InvalidSellerSignature(0x279e143fa2a5d84389926Da7c107f5a0F0220bA3,
        // 0xc0ffee254729296a45a3885639AC7E10F9d54979)
        fantiumMarketplace.executeOffer(offer, signature);
    }
}
